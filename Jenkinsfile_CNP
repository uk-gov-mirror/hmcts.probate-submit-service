#!groovy
@Library("Infrastructure")

def type = "java"
String product = "probate"
String component = "submit-service"

def secrets = [
        'probate-${env}'      : [
                secret('probateBusinessUrl', 'TEST_BUSINESS_URL'),
                secret('s2sAuthTotpSecret', 'S2S_AUTH_TOTP_SECRET'),
                secret('probateIdamSecret', 'IDAM_SECRET'),
                secret('probateCcdDataStoreApi', 'CCD_DATA_STORE_API_URL'),
                secret('serviceAuthProviderBaseUrl', 'SERVICE_AUTH_PROVIDER_BASE_URL'),
                secret('probateUserAuthUrl', 'USER_AUTH_PROVIDER_OAUTH2_URL'),
                secret('probateIdamOauthRedirectUrl', 'IDAM_OAUTH2_REDIRECT_URI'),
                secret('probate-service-id', 'IDAM_CLIENT_ID'),
                secret('cwUserEmail', 'CW_USER_EMAIL'),
                secret('cwUserPass', 'CW_USER_PASSWORD')
        ],
        's2s-${env}'      : [
                secret('microservicekey-ccd-data', 'DATA_STORE_S2S_KEY'),
                secret('microservicekey-ccd-definition', 'DEFINITION_STORE_S2S_KEY'),
                secret('microservicekey-ccd-gw', 'API_GATEWAY_S2S_KEY'),
                secret('microservicekey-ccd-admin', 'ADMIN_S2S_KEY'),
                secret('microservicekey-ccd-ps', 'PRINT_S2S_KEY')
        ],
        'ccd-${env}'      : [
                secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
                secret('ccd-api-gateway-oauth2-client-secret', 'API_GATEWAY_IDAM_SECRET')
        ]

]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline("java", product, component) {

  loadVaultSecrets(secrets)
  enableAksStagingDeployment()
  enableSlackNotifications('#probate-jenkins')

  disableLegacyDeployment()

    after('test') {
//        try {
//            if (env.CHANGE_BRANCH || env.BRANCH_NAME == 'master') {
//                env.PACT_BROKER_URL = "pact-broker.platform.hmcts.net"
//                env.PACT_BROKER_PORT = "443"
//                env.PACT_BROKER_SCHEME = "https"
//                env.PACT_BROKER_FULL_URL = "https://pact-broker.platform.hmcts.net"
//                env.PACT_BRANCH_NAME = env.CHANGE_BRANCH
//                if (env.BRANCH_NAME == 'master') {
//                    env.PACT_BRANCH_NAME = 'master'
//                }
//                // sh './gradlew pitest'
//                env.PACT_BROKER_VERSION = sh(returnStdout: true, script: 'git rev-parse --verify --short HEAD')
//                sh './gradlew pactTask -Dpact.provider.version=${PACT_BROKER_VERSION}'
//            }
//        } finally {
//            archiveArtifacts "build/reports/tests/**/*.*"
////        archiveArtifacts "build/reports/pitest/**/*.*"
//        }

    junit 'build/test-results/test/**/*.xml'
    archiveArtifacts 'build/reports/tests/test/index.html'
    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/test",
            reportFiles          : "index.html",
            reportName           : "probate-submit-service Test Report"
    ]

    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/jacoco",
            reportFiles          : "index.html",
            reportName           : "probate-submit-service Code Coverage Report"
    ]
  }

    after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }
}
